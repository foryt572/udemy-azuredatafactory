{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "udemy-azuredatafactory"
		},
		"ls_sql_server_adventureworks_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_server_adventureworks_db'"
		},
		"ls_sql_server_target_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_server_target_db'"
		},
		"ls_sql_server_watermark_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_server_watermark_db'"
		},
		"ls_databricks_ws_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0924-044743-dew3nui4"
		},
		"ls_udemyadlsgen2acct_adls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://udemyadlsgen2acct.dfs.core.windows.net/"
		},
		"tr_process_formula1_data_latest_properties_pipeline_parameters_p_window_end_date": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowEndTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/migrate_sql_to_sql_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach table info",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.p_table_info",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Old watermark lookup",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT watermark as old_watermark_value FROM dbo.watermarktable WHERE table_name = '@{item().tableName}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_server_watermarkdb_old_watermark",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "New watermark lookup",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT MAX(@{item().waterMarkColumn}) as new_watermark_value FROM @{concat(item().schemaName,'.', item().tableName)}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_server_adventureworks_new_watermark",
											"type": "DatasetReference",
											"parameters": {
												"p_schemaName": {
													"value": "@item().schemaName",
													"type": "Expression"
												},
												"p_tableName": {
													"value": "@item().tableName",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Copy data from tables",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Old watermark lookup",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "New watermark lookup",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM @{concat(item().schemaName, '.', item().tableName)}\nWHERE @{item().waterMarkColumn} > '@{formatDateTime(activity('Old watermark lookup').output.firstRow.old_watermark_value, 'yyyy-MM-ddTHH:mm:ss')}' AND @{item().waterMarkColumn} <= '@{formatDateTime(activity('New watermark lookup').output.firstRow.new_watermark_value, 'yyyy-MM-ddTHH:mm:ss')}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": {
													"value": "@item().keyColumn",
													"type": "Expression"
												}
											},
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_incremental_copy_sql_server",
											"type": "DatasetReference",
											"parameters": {
												"p_schemaName": {
													"value": "@item().schemaName",
													"type": "Expression"
												},
												"p_tableName": {
													"value": "@item().tableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_sql_server_targetdb",
											"type": "DatasetReference",
											"parameters": {
												"p_schemaName": {
													"value": "@item().schemaName",
													"type": "Expression"
												},
												"p_tableName": {
													"value": "@item().tableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data from tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"p_table_name": {
												"value": {
													"value": "@item().tableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"p_watermark": {
												"value": {
													"value": "@activity('New watermark lookup').output.firstRow.new_watermark_value",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_sql_server_watermark_db",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_table_info": {
						"type": "array",
						"defaultValue": [
							{
								"tableName": "Customer",
								"schemaName": "SalesLT",
								"keyColumn": [
									"CustomerID"
								],
								"waterMarkColumn": "ModifiedDate"
							},
							{
								"tableName": "Product",
								"schemaName": "SalesLT",
								"keyColumn": [
									"ProductID"
								],
								"waterMarkColumn": "ModifiedDate"
							}
						]
					}
				},
				"folder": {
					"name": "sql_to_sql_pipeline"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T07:43:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_server_watermarkdb_old_watermark')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_server_adventureworks_new_watermark')]",
				"[concat(variables('factoryId'), '/datasets/ds_incremental_copy_sql_server')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_server_targetdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_server_watermark_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/migrate_sql_to_sql_pipeline_cicd')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach table info",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.p_table_info",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Old watermark lookup",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT watermark as old_watermark_value FROM dbo.watermarktable WHERE table_name = '@{item().tableName}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_server_watermarkdb_old_watermark",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "New watermark lookup",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT MAX(@{item().waterMarkColumn}) as new_watermark_value FROM @{concat(item().schemaName,'.', item().tableName)}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_sql_server_adventureworks_new_watermark",
											"type": "DatasetReference",
											"parameters": {
												"p_schemaName": {
													"value": "@item().schemaName",
													"type": "Expression"
												},
												"p_tableName": {
													"value": "@item().tableName",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Copy data from tables",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Old watermark lookup",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "New watermark lookup",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM @{concat(item().schemaName, '.', item().tableName)}\nWHERE @{item().waterMarkColumn} > '@{formatDateTime(activity('Old watermark lookup').output.firstRow.old_watermark_value, 'yyyy-MM-ddTHH:mm:ss')}' AND @{item().waterMarkColumn} <= '@{formatDateTime(activity('New watermark lookup').output.firstRow.new_watermark_value, 'yyyy-MM-ddTHH:mm:ss')}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": {
													"value": "@item().keyColumn",
													"type": "Expression"
												}
											},
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_incremental_copy_sql_server",
											"type": "DatasetReference",
											"parameters": {
												"p_schemaName": {
													"value": "@item().schemaName",
													"type": "Expression"
												},
												"p_tableName": {
													"value": "@item().tableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_sql_server_targetdb",
											"type": "DatasetReference",
											"parameters": {
												"p_schemaName": {
													"value": "@item().schemaName",
													"type": "Expression"
												},
												"p_tableName": {
													"value": "@item().tableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data from tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"p_table_name": {
												"value": {
													"value": "@item().tableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"p_watermark": {
												"value": {
													"value": "@activity('New watermark lookup').output.firstRow.new_watermark_value",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_sql_server_watermark_db",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_table_info": {
						"type": "array",
						"defaultValue": [
							{
								"tableName": "Customer",
								"schemaName": "SalesLT",
								"keyColumn": [
									"CustomerID"
								],
								"waterMarkColumn": "ModifiedDate"
							},
							{
								"tableName": "Product",
								"schemaName": "SalesLT",
								"keyColumn": [
									"ProductID"
								],
								"waterMarkColumn": "ModifiedDate"
							}
						]
					}
				},
				"folder": {
					"name": "sql_to_sql_pipeline"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T07:43:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_server_watermarkdb_old_watermark')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_server_adventureworks_new_watermark')]",
				"[concat(variables('factoryId'), '/datasets/ds_incremental_copy_sql_server')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_server_targetdb')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_server_watermark_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_formula1_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Details",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_formula1_raw",
								"type": "DatasetReference",
								"parameters": {
									"p_window_end_date": {
										"value": "@pipeline().parameters.p_window_end_date",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Folder Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Folder Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Folder Details').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Ingest Circuits File",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/ingestion/1.ingest_circuits_file",
										"baseParameters": {
											"p_data_source": {
												"value": "@variables('v_data_source')",
												"type": "Expression"
											},
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Races File",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/ingestion/2.ingest_races_file",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Constructors File",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/ingestion/3.ingest_constructors_file",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Drivers File",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/ingestion/4.Ingest_drivers_file",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Results File",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/ingestion/5.Ingest_results_file",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Pitstops File",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/ingestion/6.Ingest_pitstops_file",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Laptimes File",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/ingestion/7.Ingest_laptimes_file",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Qualifying File",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/ingestion/8.Ingest_qualifying_file",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_window_end_date": {
						"type": "string"
					}
				},
				"variables": {
					"v_data_source": {
						"type": "String",
						"defaultValue": "Ergast"
					}
				},
				"folder": {
					"name": "formula1_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T17:38:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_formula1_raw')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_databricks_ws')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_formula1_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Ingestion",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_ingest_formula1_data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_window_end_date": {
									"value": "@pipeline().parameters.p_window_end_date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Transformation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Ingestion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_transform_formula1_data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_window_end_date": {
									"value": "@pipeline().parameters.p_window_end_date",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_window_end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "formula1_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T17:38:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_ingest_formula1_data')]",
				"[concat(variables('factoryId'), '/pipelines/pl_transform_formula1_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_formula1_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Details",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_formula1_raw",
								"type": "DatasetReference",
								"parameters": {
									"p_window_end_date": {
										"value": "@pipeline().parameters.p_window_end_date",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Folder Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Folder Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Folder Details').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Trans drivers standing",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "Trans race results",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/trans/2.drivers_standing",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Trans race results",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/trans/1.race_results",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Trans constructors standing",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "Trans race results",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/trans/3.constructor_standing",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Trans calculated race results",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/f1racing/trans/4.calculated_race_results",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_ws",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_window_end_date": {
						"type": "string"
					}
				},
				"variables": {
					"v_data_source": {
						"type": "String",
						"defaultValue": "Ergast"
					}
				},
				"folder": {
					"name": "formula1_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T17:38:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_formula1_raw')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_databricks_ws')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_formula1_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_udemyadlsgen2acct_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_window_end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "formula1_dataset"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@formatDateTime(dataset().p_window_end_date, 'yyyy-MM-dd')",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"constructorId": {
							"type": "integer"
						},
						"constructorRef": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"nationality": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_udemyadlsgen2acct_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_incremental_copy_sql_server')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_server_adventureworks_db",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_schemaName": {
						"type": "string"
					},
					"p_tableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "sql_to_sql_datasets"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().p_schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().p_tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_server_adventureworks_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_server_adventureworks_new_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_server_adventureworks_db",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_schemaName": {
						"type": "string"
					},
					"p_tableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "sql_to_sql_datasets"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().p_schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().p_tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_server_adventureworks_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_server_targetdb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_server_target_db",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_schemaName": {
						"type": "string"
					},
					"p_tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().p_schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().p_tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_server_target_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_server_watermarkdb_old_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_server_watermark_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sql_to_sql_datasets"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_server_watermark_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_databricks_ws')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-5451294672301762.2.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/7c04ae88-3a10-4b5b-b6b9-1dffd526eec3/resourceGroups/udemy_azuredataengineering_rg/providers/Microsoft.Databricks/workspaces/formula1-premium-ws",
					"existingClusterId": "[parameters('ls_databricks_ws_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_server_adventureworks_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_server_adventureworks_db_connectionString')]"
				},
				"connectVia": {
					"referenceName": "sql-server-integrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/sql-server-integrationruntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_server_target_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_server_target_db_connectionString')]"
				},
				"connectVia": {
					"referenceName": "sql-server-integrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/sql-server-integrationruntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_server_watermark_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_server_watermark_db_connectionString')]"
				},
				"connectVia": {
					"referenceName": "sql-server-integrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/sql-server-integrationruntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_udemyadlsgen2acct_adls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_udemyadlsgen2acct_adls_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_process_formula1_data_latest')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_process_formula1_data",
						"type": "PipelineReference"
					},
					"parameters": {
						"p_window_end_date": "[parameters('tr_process_formula1_data_latest_properties_pipeline_parameters_p_window_end_date')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 168,
					"startTime": "2021-03-14T22:00:00Z",
					"endTime": "2021-04-25T22:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_process_formula1_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql-server-integrationruntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}